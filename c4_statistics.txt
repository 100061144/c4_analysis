C4 Compiler Code Statistics

For this task, I've decided to use Lizard and Valgrind as
the software to produce both the static and dynamic analysis tools.
Not to mention the usage of '-g' flag which helps with showing
more verbose warnings that help identify and understand code.


Lines of Code (LOC)
- Total lines of code: 486
- Lines per function:
  - `next()`: 84 lines
  - `expr()`: 147 lines
  - `stmt()`: 47 lines
  - `main()`: 181 lines
- Average lines per function: 114.8

Cyclomatic Complexity
- `next()`: 85
- `expr()`: 91
- `stmt()`: 15
- `main()`: 100
- Average cyclomatic complexity: 72.8

Functions Analysis
- Total number of functions: 4
- Function sizes (in LOC):
  - `next()`: 84 lines (17.3% of total)
  - `expr()`: 147 lines (30.2% of total)
  - `stmt()`: 47 lines (9.7% of total)
  - `main()`: 181 lines (37.2% of total)
- Average function size: 114.8 lines
- Functions with high complexity (CCN > 15): 3 out of 4 (75%)
  - `next()`: 85
  - `expr()`: 91
  - `main()`: 100

Token Analysis
- Total tokens: 6028
- Tokens per function:
  - `next()`: 1016 tokens
  - `expr()`: 2403 tokens
  - `stmt()`: 395 tokens
  - `main()`: 2214 tokens
- Average tokens per function: 1507.0

Parameter Count
- `next()`: 0 parameters
- `expr()`: 1 parameter
- `stmt()`: 0 parameters
- `main()`: 2 parameters
- Average parameters per function: 0.75

Global Variables
The program uses several global variables:
- Source code pointers: `p`, `lp`, `data`
- Emitted code pointers: `e`, `le`
- Symbol table pointer: `sym`
- Identifier pointer: `id`
- Tokens and values: `tk`, `ival`, `ty`
- Other state: `loc`, `line`, `src`, `debug`

Total count of global variables: 13

Branches and Loops
- Complex decision structures:
  - `next()`: Multiple if-else chains for token identification
  - `expr()`: Complex precedence climbing algorithm with nested conditionals
  - `stmt()`: Conditionals for different statement types
  - `main()`: VM instruction execution loop with large switch-like structure

- Loop structures:
  - While loops in `next()` for token extraction
  - While loop in `expr()` for operator precedence
  - While loops in `stmt()` for block statements
  - Main execution loop in `main()`

Memory Usage Patterns
- Valgrind Analysis Results:
  - No memory leaks detected (`All heap blocks were freed`)
  - Total heap allocation: 1,024 bytes
  - Peak memory usage: 1,032 bytes (including extra overhead)
  - Memory allocations performed by `malloc()`, but properly released at termination
  - Stack usage is minimal, with no excessive recursion or stack overflows detected

Performance Profiling
- Heap Usage Profile (Massif):
  - Peak memory usage: 1,032 bytes
  - Memory allocated for standard I/O buffering (`puts` in `main()`)
  - Only 1 memory allocation (`malloc()`) detected during execution
  - No excessive dynamic memory allocation observed

Code Structure
- Lexical analysis: `next()` function (17.3% of code)
- Parsing and code generation: `expr()` and `stmt()` functions (39.9% of code)
- VM and runtime: `main()` function (37.2% of code)
- Remaining code: definitions and declarations (5.6% of code)

Warnings and Issues
- Three functions exceed recommended complexity thresholds:
  - `next()`: Complexity 85 (recommended: <15)
  - `expr()`: Complexity 91 (recommended: <15)
  - `main()`: Complexity 100 (recommended: <15)
- 90% of the code is in functions with warnings
- Warning rate for functions: 75%
- No memory leaks detected
- Minimal memory usage with no heap fragmentation

